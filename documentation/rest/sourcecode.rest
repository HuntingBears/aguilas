Understanding Aguilas's Source Code
===================================

When deploying Aguilas into a real production environment, you will almost always want to use an `official packaged release <installing.rest>`_ of Aguilas. However, if you'd like to try out in-development code from an upcoming release or contribute to the development of Aguilas, you'll need to obtain a copy from Aguilas's source code repository. This document covers the way the code repository is laid out and how to work with and find things in it.

Repositories
------------

The Aguilas development model uses `git <git.rest>`_ to track changes to the code over time and manage collaboration. You'll need a copy of the git client program on your computer, and you'll want to familiarize yourself with the basics of `how git works <git.rest>`_.

The Aguilas git repository is located online at various places, all syncronized with the last code from the authors. We host Aguilas on `Google Code <http://code.google.com/p/aguilas/>`_, `Github <https://github.com/HuntingBears/aguilas/>`_, and `Gitorious <https://gitorious.org/huntingbears/aguilas>`_. In terms of source code, all of them have the same information, so, you can choose the one you like the most. We use GitHub for tracking bugs and other project management stuff. If you want to contribute to Aguilas, please read our "`Contributing to Aguilas <contributing.rest>`_" page.

Branches and Tags
-----------------

Inside the repository you will find that Aguilas development is divided into four branches: development, release, master and debian.

``development branch``
	This is where the development is actually made, and because of that, the code provided here might be experimental, unstable or broken. If you want to `contribute <contributing.rest>`_ to Aguilas, *this is where you should start*.

``release branch``
	This is where stable releases are obtained from. After a development cycle is finished, all changes are merged here, plus other *`tactical movements <development.rest>`_*.

``debian branch``
	**Only** contains the debian folder that generates the Aguilas Debian package.

``master branch``
	The purpose of the master branch is to serve as a *merging hub* in the process of making the Aguilas debian package. This branch receives it content from the ``release`` (upstream code) and ``debian`` (debian folder) branches before building the debian package.

Tags in aguilas are done each time a new (development or release) version is made. The difference is that development (*snapshots*) versions are numbered in the form of ``X.Y.Z+[YEAR][MONTH][DAY][HOUR][MINUTE][SECONDS]`` and stable (*releases*) versions are numbered in the form ``X.Y.Z``.

Common tasks and procedures
---------------------------

Every common task for the Aguilas maintainers, developers, contributors and users are automatized using the Makefile. Here they are listed:

+ ``make check-buildep``:  Checking build tasks dependencies. It allows the user/developer to check if all software dependencies requiered to build documentation, themes, tranlations and cofigurations are met.
+ ``make check-maintdep``:  Checking maintainer tasks dependencies. It allows the developer to check if all software dependencies requiered to exacute common maintainer (update PO and POT files, make a snapshot, make a release) tasks are met.
+ ``make check-instdep``:  Checking install dependencies. It allows the user to check if all software dependencies for installation are met.
+ ````:  
+ ````:  
+ ````:  
+ ````:  
+ ````:  





Files and Directories
----------------------

Aguilas directory structure is distributed in the following form::

	.
	├── [PHP FILES]
	├── [PHP FILES]
	├── [...]
	├── [DOCUMENTATION FOLDER]
	│   ├── [GITHUBWIKI FOLDER]
	│   ├── [GOOGLEWIKI FOLDER]
	│   ├── [HTML FOLDER]
	│   ├── [MAN FOLDER]
	│   └── [REST FOLDER]
	├── [EVENTS FOLDER]
	├── [LIBRARIES FOLDER]
	├── [LOCALE FOLDER]
	│   ├── [LOCALE A]
	│   ├── [LOCALE B]
	│   ├── [...]
	│   └── [POT FOLDER]
	├── [SETUP FOLDER]
	├── [THEMES FOLDER]
	├── [TOOLS FOLDER]
	└── Makefile

We 
